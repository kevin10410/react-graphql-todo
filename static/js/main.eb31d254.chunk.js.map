{"version":3,"sources":["graphql/query.js","components/Form.js","components/Tasks/Task.js","components/Tasks/index.js","components/FilterButton.js","App.js","graphql/client.js","reportWebVitals.js","index.js"],"names":["QUERY_TASK","gql","ADD_TASK","DELETE_TASK","UPDATE_TASK","Form","props","error","loading","className","spin","size","icon","faSpinner","onSubmit","e","preventDefault","addTaskHandler","htmlFor","id","type","name","autoComplete","value","onChange","inputChangeHandler","target","Todo","useState","newName","setNewName","isEditing","setIsEditing","useMutation","onCompleted","queryRefetch","deleteTask","deleteLoading","updateTask","updateLoading","editingTemplate","disabled","onClick","variables","title","completed","pulse","viewTemplate","checked","Tasks","tasks","map","task","Task","FilterButton","isPressed","setFilter","FILTER_MAP","All","Active","Completed","FILTER_NAMES","Object","keys","App","useQuery","queryData","data","queryError","queryLoading","refetch","refetchQueries","onQueryUpdated","observableQuery","setName","addTask","addError","addLoading","filter","queryTask","remainingTasksNumber","length","client","ApolloClient","uri","cache","InMemoryCache","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","ApolloProvider","graphqlClient","document","getElementById"],"mappings":"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","file":"static/js/main.eb31d254.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const QUERY_TASK = gql`\n  {\n    queryTask {\n      id\n      title\n      completed\n    }\n  }\n`;\n\nexport const ADD_TASK = gql`\n  mutation addTask($title: String!) {\n    addTask(input: {title: $title, completed: false}) {\n      task {\n        id\n      }\n    }\n  }\n`;\n\nexport const DELETE_TASK = gql`\n  mutation deleteTask($id: [ID!]) {\n    deleteTask(filter: {id: $id}) {\n      task {\n        id\n      }\n    }\n  }\n`;\n\nexport const UPDATE_TASK = gql`\n  mutation updateTask($id: [ID!], $title: String, $completed: Boolean) {\n    updateTask(input: {filter: {id: $id}, set: {title: $title, completed: $completed}}) {\n      numUids\n    }\n  }\n`;\n","import { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Form = props => {\n  const submitHandler = e => {\n    e.preventDefault();\n    props.addTaskHandler();\n  };\n\n  const inputChanged = e => {\n    props.inputChangeHandler(e.target.value)\n  };\n\n  if (props.error) return <p>Error...</p>\n\n  if (props.loading) return (\n    <h2 className=\"label-wrapper\">\n      <FontAwesomeIcon\n        spin\n        size=\"2x\"\n        icon={faSpinner}\n      />\n    </h2>\n  );\n\n  return (\n    <form onSubmit={submitHandler}>\n      <h2 className=\"label-wrapper\">\n        <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n          What needs to be done?\n        </label>\n      </h2>\n      <input className=\"input input__lg\"\n        id=\"new-todo-input\"\n        type=\"text\"\n        name=\"text\"\n        autoComplete=\"off\"\n        value={props.name}\n        onChange={inputChanged}\n      />\n      <button type=\"submit\" className=\"btn btn__primary btn__lg\">\n        Add\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { DELETE_TASK, UPDATE_TASK } from '../../graphql/query';\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Todo = props => {\n  const [newName, setNewName] = useState('');\n  const [isEditing, setIsEditing] = useState(false);\n\n  const [\n    deleteTask,\n    {\n      loading: deleteLoading,\n    }\n  ] = useMutation(DELETE_TASK, {\n    onCompleted: () => {\n      props.queryRefetch();\n    },\n  });\n\n  const [\n    updateTask,\n    {\n      loading: updateLoading,\n    }\n  ] = useMutation(UPDATE_TASK, {\n    onCompleted: () => {\n      props.queryRefetch();\n      setIsEditing(false);\n    },\n  });\n\n  const deleteTaskHandler = () => {\n    deleteTask({\n      variables: {\n        id: props.id\n      }\n    })\n  };\n\n  const updateTitleHandler = () => {\n    updateTask({\n      variables: {\n        id: props.id,\n        title: newName,\n        completed: props.completed,\n      }\n    });\n  };\n\n  const completedToggleHandler = () => {\n    if (updateLoading) return;\n    updateTask({\n      variables: {\n        id: props.id,\n        title: props.name,\n        completed: !props.completed,\n      }\n    });\n  };\n\n  const cancelEdit = () => {\n    setNewName('');\n    setIsEditing(false);\n  };\n\n  const submitNewName = e => {\n    e.preventDefault();\n    props.updateTask(props.id, newName);\n    setNewName(\"\");\n    setIsEditing(false);\n  };\n\n  const editingTemplate = (\n    <form className=\"stack-small\"\n      onSubmit={submitNewName}\n    >\n      <div className=\"form-group\">\n        <label className=\"todo-label\" htmlFor={props.id}>\n          New name for {props.name}\n        </label>\n        <input className=\"todo-text\"\n          type=\"text\"\n          id={props.id}\n          value={newName}\n          onChange={e => { setNewName(e.target.value) }}\n        />\n      </div>\n      <div className=\"btn-group\">\n        <button className=\"btn todo-cancel\"\n          type=\"button\"\n          disabled={updateLoading}\n          onClick={cancelEdit}\n        >\n          Cancel\n          <span className=\"visually-hidden\">renaming {props.name}</span>\n        </button>\n        <button className=\"btn btn__primary todo-edit\"\n          type=\"submit\"\n          disabled={updateLoading || newName === ''}\n          onClick={updateTitleHandler}\n        >\n          {\n            updateLoading\n              ? <FontAwesomeIcon\n                  pulse\n                  size=\"1x\"\n                  icon={faSpinner}\n                />\n              : 'Save'\n          }\n        </button>\n      </div>\n    </form>\n  );\n\n  const viewTemplate = (\n    <div className=\"stack-small\">\n      <div className=\"c-cb\">\n        <input\n          id={props.id}\n          type=\"checkbox\"\n          disabled={updateLoading}\n          checked={props.completed}\n          onChange={completedToggleHandler}\n        />\n        <label className=\"todo-label\" htmlFor={props.id}>\n          {props.name}\n        </label>\n        {\n          updateLoading && <FontAwesomeIcon\n            pulse\n            size=\"lg\"\n            icon={faSpinner}\n          />\n        }\n        </div>\n        <div className=\"btn-group\">\n          <button className=\"btn\"\n            type=\"button\"\n            disabled={deleteLoading}\n            onClick={() => setIsEditing(true)}\n          >\n            Edit <span className=\"visually-hidden\">{props.name}</span>\n          </button>\n          <button className=\"btn btn__danger\"\n            type=\"button\"\n            disabled={deleteLoading}\n            onClick={deleteTaskHandler}\n          >\n            {\n              deleteLoading\n                ? <FontAwesomeIcon\n                    pulse\n                    size=\"lg\"\n                    icon={faSpinner}\n                  />\n                : 'Delete'\n            }\n          </button>\n        </div>\n    </div>\n  );\n\n  return (\n    <li className=\"todo stack-small\">\n      { isEditing ? editingTemplate : viewTemplate }\n    </li>\n  );\n};\n\nexport default Todo;\n","import Task from './Task';\n\nconst Tasks = props => {\n  if (props.error) return <p>Error...</p>\n  if (props.loading) return <p>Loading...</p>\n\n  return (\n    <ul className=\"todo-list stack-large stack-exception\"\n      aria-labelledby=\"list-heading\"\n    >\n      {\n        props.tasks\n          .map(task => (\n            <Task\n              id={task.id}\n              key={task.id}\n              name={task.title}\n              completed={task.completed}\n              queryRefetch={props.queryRefetch}\n            />\n          ))\n      }\n    </ul>\n  );\n};\n\nexport default Tasks;","\nconst FilterButton = props => {\n  return(\n    <button\n      type=\"button\"\n      className=\"btn toggle-btn\"\n      aria-pressed={props.isPressed}\n      onClick={() => props.setFilter(props.name)}\n    >\n      <span className=\"visually-hidden\">Show </span>\n      <span>{props.name}</span>\n      <span className=\"visually-hidden\"> tasks</span>\n    </button>\n  );\n};\n\nexport default FilterButton;\n","import { useState } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { QUERY_TASK, ADD_TASK } from './graphql/query';\n\nimport From from './components/Form';\nimport Tasks from './components/Tasks';\nimport FilterButton from './components/FilterButton';\nimport './App.css';\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App() {\n  const {\n    data: queryData,\n    error: queryError,\n    loading: queryLoading,\n    refetch: queryRefetch,\n  } = useQuery(QUERY_TASK);\n\n  const [\n    addTask,\n    {\n      error: addError,\n      loading: addLoading,\n    }\n  ] = useMutation(ADD_TASK, {\n    refetchQueries: [QUERY_TASK],\n    onQueryUpdated(observableQuery) {\n      setName('');\n      return observableQuery.refetch();\n    },\n  });\n\n  const [name, setName] = useState('');\n  const [filter, setFilter] = useState('All');\n\n  const tasks = queryData?.queryTask\n    .filter(FILTER_MAP[filter]);\n\n  const remainingTasksNumber = queryLoading || queryError\n    ? 0\n    : queryData.queryTask\n        .filter(({ completed }) => completed === false)\n        .length;\n\n\n  const inputChangeHandler = value => {\n    setName(value);\n  };\n\n  const addTaskHandler = () => {\n    addTask({\n      variables: {\n        title: name,\n      },\n    })\n  };\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>React GraphQL Todo</h1>\n      <From\n        name={name}\n        error={addError}\n        loading={addLoading}\n        addTaskHandler={addTaskHandler}\n        inputChangeHandler={inputChangeHandler}\n      />\n      <div className=\"filters btn-group stack-exception\">\n        { \n          FILTER_NAMES.map(name =>\n            <FilterButton\n              key={name}\n              name={name}\n              isPressed={name === filter}\n              setFilter={setFilter}\n            />\n          )\n        }\n      </div>\n      <h2 id=\"list-heading\">\n        { remainingTasksNumber } tasks remaining\n      </h2>\n      <Tasks\n        tasks={tasks}\n        error={queryError}\n        loading={queryLoading}\n        queryRefetch={queryRefetch}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  ApolloClient,\n  InMemoryCache,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'https://blue-surf-400060.us-east-1.aws.cloud.dgraph.io/graphql',\n  cache: new InMemoryCache()\n});\n\nexport default client;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport './index.css';\nimport App from './App';\nimport graphqlClient from './graphql/client';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={graphqlClient}>\n      <App/>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}